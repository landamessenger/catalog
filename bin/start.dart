import 'dart:io';

import 'package:catalog/src/base/serial.dart';
import 'package:catalog/src/builders/built_component.dart';
import 'package:catalog/src/component/component_node.dart';

import 'configuration.dart';

const kDebugMode = true;

void main(List<String> arguments) async {
  var dependencies = loadDependenciesFile();
  if (kDebugMode) {
    print(introMessage(dependencies['catalog'].toString()));
  }

  var appId = loadId();
  var config = loadConfigFile();

  final assetsFolder = config['assets'] ?? 'assets';
  final page = config['page'] ?? 'catalog_component.dart';
  final pageName = config['pageName'] ?? 'CatalogComponent';
  final pageRoute = config['pageRoute'] ?? 'catalog';
  final prefixValue = config['prefix'] ?? 'preview';

  final dir = Directory('./${config['base']}');
  await dir.create(recursive: true);

  final dirOutPut = Directory('./${config['base']}/${config['output']}');
  await dirOutPut.create(recursive: true);

  final List<FileSystemEntity> entities =
      await dir.list(recursive: true).toList();

  final files = <FileSystemEntity>[];

  for (FileSystemEntity fileSystemEntity in entities) {
    if (fileSystemEntity.path.contains('.$prefixValue.')) {
      files.add(fileSystemEntity);
    }
  }

  var map = <String, BuiltComponent>{};

  for (FileSystemEntity fileSystemEntity in files) {
    final File file = File(fileSystemEntity.path);
    var p = file.path.split(config['base'])[1];
    var package = 'package:$appId$p';
    var className = await findClassName(file.path);
    //print('- Building preview of $className in $package');

    var preview = await previewFound(
        file.path,
        './${config['base']}/${config['output']}/',
        'process.dart',
        package,
        className!);

    if (preview == null) {
      print('No preview data found ${file.path}');
      continue;
    }

    // print('Preview: ${jsonEncode(preview.toJson())}');

    var outputFolder =
        './${config['base']}/${config['output']}/${preview.path}/';

    var build = await createPage(
      appId,
      config['base'],
      outputFolder,
      p.split('/').last,
      prefixValue,
      preview,
      package,
      className,
    );

    if (build?.preview == null) {
      print('No build for $className');
      continue;
    }
    // print('Built: ${jsonEncode(build!.toJson())}');

    map[build!.preview!.path] = build;
  }

  ComponentNode? node = getNodesFrom(map);

  node = await buildMiddlePages(
    config,
    appId,
    node,
    '',
    pageRoute,
    0,
  );

  if (node == null) {
    return;
  }

  print(node.toJson().toPrettyString());

  final File assetsConfig = File('./${config['runtimeConfigHolder']}');
  assetsConfig.writeAsStringSync(node.toJson().toPrettyString());

  final File catalogFile =
      File('./${config['base']}/${config['output']}/${config['pageFile']}');

  print(node.routerBuilder);

  var catalogContent = '''
/// AUTOGENERATED FILE. DO NOT EDIT

import 'package:flutter/material.dart';
import 'package:catalog/catalog.dart';
import 'package:go_router/go_router.dart';
${node.imports}

class $pageName extends StatefulWidget {
  static String routeName = '/$pageRoute';
  static GoRoute route = ${node.routerBuilder};
  const $pageName({Key? key}) : super(key: key);

  @override
  ${pageName}State createState() => ${pageName}State();
}

class ${pageName}State extends State<$pageName> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FutureBuilder<ComponentNode?>(
          initialData: null,
          future: WidgetPreview().get(context),
          builder: (context, data) {
            if (!data.hasData && data.data != null) {
              return Container();
            }
            final node = data.data as ComponentNode;
            final treeController = TreeController<ComponentNode>(
              roots: [node],
              childrenProvider: (ComponentNode node) => node.children.values,
            );
            return AnimatedTreeView<ComponentNode>(
              treeController: treeController,
              nodeBuilder:
                  (BuildContext context, TreeEntry<ComponentNode> entry) {
                return InkWell(
                  onTap: () => treeController.toggleExpansion(entry.node),
                  child: TreeIndentation(
                    entry: entry,
                    child: Text(entry.node.id),
                  ),
                );
              },
            );
          }),
    );
  }
}

  '''
      .replaceAll('"""', '\'\'\'')
      .replaceAll(' []', ' const []');

  catalogFile.writeAsStringSync(catalogContent);

  final File file =
      File('./${config['base']}/${config['output']}/process.dart');
  if (file.existsSync()) await file.delete();
}
