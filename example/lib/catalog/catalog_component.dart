/// AUTOGENERATED FILE. DO NOT EDIT

import 'package:flutter/material.dart';
import 'package:catalog/catalog.dart';

import 'package:example/catalog/widgets/utils/bottom/fab_widget.dart';

import 'package:example/catalog/widgets/other_utils/bottom/warning_info_widget.dart';

import 'package:example/catalog/widgets/screen/body_widget.dart';
import 'package:example/catalog/widgets/screen/counter_widget.dart';

import 'package:example/catalog/widgets/main_screen.dart';

class CatalogComponent extends StatefulWidget {
  static String routeName = '/catalog';

  static GoRoute route = GoRoute(
    path: CatalogComponent.routeName,
    pageBuilder: (context, state) => NoTransitionPage(
      key: state.pageKey,
      child: const CatalogComponent(),
    ),
    routes: [
      GoRoute(
        path: 'widgets',
        redirect: (context, state) {
          if (state.fullPath != state.matchedLocation) return null;
          return CatalogComponent.routeName;
        },
        routes: [
          GoRoute(
            path: MainScreenPreviewPreviewPageDummy.routeName,
            pageBuilder: (context, state) => NoTransitionPage(
              key: state.pageKey,
              child: const MainScreenPreviewPreviewPageDummy(),
            ),
          ),
          GoRoute(
            path: 'utils',
            redirect: (context, state) {
              if (state.fullPath != state.matchedLocation) return null;
              return CatalogComponent.routeName;
            },
            routes: [
              GoRoute(
                path: 'bottom',
                redirect: (context, state) {
                  if (state.fullPath != state.matchedLocation) return null;
                  return CatalogComponent.routeName;
                },
                routes: [
                  GoRoute(
                    path: FabWidgetPreviewPreviewPageDummy.routeName,
                    pageBuilder: (context, state) => NoTransitionPage(
                      key: state.pageKey,
                      child: const FabWidgetPreviewPreviewPageDummy(),
                    ),
                  ),
                ],
              )
            ],
          ),
          GoRoute(
            path: 'other_utils',
            redirect: (context, state) {
              if (state.fullPath != state.matchedLocation) return null;
              return CatalogComponent.routeName;
            },
            routes: [
              GoRoute(
                path: 'bottom',
                redirect: (context, state) {
                  if (state.fullPath != state.matchedLocation) return null;
                  return CatalogComponent.routeName;
                },
                routes: [
                  GoRoute(
                    path: WarningInfoWidgetPreviewPreviewPageDummy.routeName,
                    pageBuilder: (context, state) => NoTransitionPage(
                      key: state.pageKey,
                      child: const WarningInfoWidgetPreviewPreviewPageDummy(),
                    ),
                  ),
                ],
              )
            ],
          ),
          GoRoute(
            path: 'screen',
            redirect: (context, state) {
              if (state.fullPath != state.matchedLocation) return null;
              return CatalogComponent.routeName;
            },
            routes: [
              GoRoute(
                path: BodyWidgetPreviewPreviewPageDummy.routeName,
                pageBuilder: (context, state) => NoTransitionPage(
                  key: state.pageKey,
                  child: const BodyWidgetPreviewPreviewPageDummy(),
                ),
              ),
              GoRoute(
                path: CounterWidgetPreviewPreviewPageDummy.routeName,
                pageBuilder: (context, state) => NoTransitionPage(
                  key: state.pageKey,
                  child: const CounterWidgetPreviewPreviewPageDummy(),
                ),
              ),
            ],
          )
        ],
      )
    ],
  );

  const CatalogComponent({super.key});

  @override
  CatalogComponentState createState() => CatalogComponentState();
}

class CatalogComponentState extends State<CatalogComponent> {
  @override
  Widget build(BuildContext context) {
    return FutureBuilder<ComponentNode?>(
      initialData: null,
      future: Catalog().get(context),
      builder: (context, data) {
        if (!data.hasData || data.data == null) {
          return Container();
        }
        final node = data.data as ComponentNode;
        return PreviewScaffold(
          basePath: CatalogComponent.routeName,
          onBackPressed: Catalog().onBackPressed,
          child: ListView(
            children: [
              buildTreeWidget(
                context,
                CatalogComponent.routeName,
                node,
                0,
              )
            ],
          ),
        );
      },
    );
  }
}
