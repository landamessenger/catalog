import 'dart:io';

import 'package:catalog/src/annotations/internal_preview.dart';

Future<void> generatePreview(
  dynamic config,
  String srcPath,
  String classImport,
  String previewAnnotation,
  String className,
  String prefix,
  InternalPreview preview,
) async {
  var clazz = className.replaceAll('()', '');

  var widgetCompose = dummyWidgetContent(className, preview);

  String fileName = srcPath.split('/').last;
  String name = fileName.split('.').first;

  var content = '''
/// AUTOGENERATED FILE. DO NOT EDIT

import 'package:catalog/catalog.dart';
import 'package:flutter/material.dart';
import '$classImport';
import '../dummy/$name.dummy.dart';

$previewAnnotation
class ${clazz}Preview extends ParentPreviewWidget {
  
  @override
  String get title => '$name';
  
  @override
  String get basePath => '/${config['pageRoute']}';
  
  const ${clazz}Preview({super.key});
    
  @override
  Widget preview(BuildContext context) {
    Catalog().widgetBasicPreviewMap.clear();
    Catalog().widgetDevicePreviewMap.clear();

    if (${clazz}Dummy().dummies.isEmpty) {
      return Container();
    }

    final deviceScreenshotsAvailable =
        ${clazz}Dummy().deviceScreenshotsAvailable;
    final screenshotsAvailable = ${clazz}Dummy().screenshotsAvailable;

    int basicScreenshots = screenshotsAvailable - deviceScreenshotsAvailable;

    return ListView(
      children: [
        Column(
          children: [
            if (basicScreenshots > 0)
              Center(
                child: Container(
                  constraints: const BoxConstraints(
                    maxWidth: 400,
                  ),
                  child: Card(
                    clipBehavior: Clip.hardEdge,
                    child: Container(
                      padding: const EdgeInsets.all(15),
                      child: Row(
                        children: [
                          Expanded(
                            child: Center(
                              child: Text(
                                '\$basicScreenshots basic screenshots available',
                              ),
                            ),
                          ),
                          const IconButton(
                            onPressed: processBasicScreenshots,
                            icon: Icon(
                              Icons.screenshot,
                            ),
                          )
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            if (deviceScreenshotsAvailable > 0)
              Center(
                child: Container(
                  constraints: const BoxConstraints(
                    maxWidth: 400,
                  ),
                  child: Card(
                    clipBehavior: Clip.hardEdge,
                    child: Container(
                      padding: const EdgeInsets.all(15),
                      child: Row(
                        children: [
                          Expanded(
                            child: Center(
                              child: Text(
                                '\$deviceScreenshotsAvailable device screenshots available',
                              ),
                            ),
                          ),
                          const IconButton(
                            onPressed: processDeviceScreenshots,
                            icon: Icon(
                              Icons.screenshot,
                            ),
                          )
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            for (int i = 0; i < ${clazz}Dummy().dummies.length; i++)
              ${dummyWidgetBuilder(clazz)}
          ],
        )
      ],
    );
  }
  
  
}

$clazz build$clazz(Dummy dummy) {
  return $widgetCompose;
}
    ''';

  String dirPath = srcPath.replaceAll(fileName, '');
  String previewPath = '${dirPath}catalog/preview/';

  await Directory(previewPath).create(recursive: true);

  String previewFile = '$previewPath$name.$prefix.dart';

  print('ðŸ©» Generating preview for $clazz - ${clazz}Preview ($previewFile)');

  File file = File(previewFile);
  await file.writeAsString(content);
}

String dummyWidgetBuilder(String clazz) {
  return '''
  PreviewBoundary(
    widgetKey: GlobalKey(),
    dummyBuilder: () => ${clazz}Dummy().dummies[i],
    builder: (BuildContext context, Dummy dummy) {
      return build$clazz(dummy);
    },
  ),
  ''';
}

String dummyWidgetContent(String className, InternalPreview preview) {
  var clazz = className.replaceAll('()', '');

  var widgetCompose = '$clazz(';

  var params = preview.parameters;
  if (params.isNotEmpty) {
    widgetCompose += '';
    for (String key in params) {
      widgetCompose += '''$key: dummy.parameters['$key'],''';
    }
    widgetCompose += '';
  }

  widgetCompose += ')';

  return widgetCompose;
}
