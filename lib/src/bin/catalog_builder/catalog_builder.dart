import 'dart:io';

import 'package:catalog/src/annotations/internal_preview.dart';
import 'package:catalog/src/builders/catalog/built_component.dart';
import 'package:catalog/src/builders/catalog/component_node.dart';

Future<String?> findPreviewClassName(String path) async {
  try {
    File file = File(path);
    final content = await file.readAsString();
    return '${content.split("class ")[1].split(" extends ParentPreviewWidget").first.trim()}()';
  } catch (e) {
    print(e);
    return null;
  }
}

Future<BuiltComponent?> createPage(
  String appId,
  String base,
  String outputPath,
  String outputFile,
  String prefix,
  InternalPreview preview,
  String import,
  String name,
) async {
  try {
    var directory = Directory(outputPath);
    await directory.create(recursive: true);
    var id = preview.id;
    File file = File(outputPath + outputFile.replaceAll('.$prefix.', '.'));

    final clazzName = name.replaceAll('()', '');
    final pageClass = '${clazzName}PreviewPageDummy';

    print(
        'ðŸ“ƒ Generating Catalog page for $clazzName - $pageClass (${file.path})');

    var content = '''
/// AUTOGENERATED FILE. DO NOT EDIT

import 'package:flutter/material.dart';
import '$import';

class $pageClass extends StatefulWidget {

  static String routeName = '$id';
  
  const $pageClass({super.key});

  @override
  ${pageClass}State createState() => ${pageClass}State();
}

class ${pageClass}State extends State<$pageClass> {
  @override
  Widget build(BuildContext context) {
    return const $clazzName();
  }
}
    ''';
    file.writeAsStringSync(content);

    var p = file.path.split(base)[1];
    var package = 'package:$appId$p';

    return BuiltComponent(
      path: file.path,
      route: preview.path,
      package: package,
      clazzName: '${name.replaceAll('()', '')}PreviewPageDummy',
      preview: preview,
    );
  } catch (e) {
    print(e);
    return null;
  }
}

ComponentNode buildTreeFromMap(
  String pageRoute,
  Map<String, List<BuiltComponent>> componentsMap,
) {
  ComponentNode root = ComponentNode(id: pageRoute, route: '/');

  ComponentNode findOrCreateNode(
    ComponentNode current,
    List<String> pathParts,
    String fullPath,
  ) {
    if (pathParts.isEmpty) {
      return current;
    }

    String part = pathParts.removeAt(0);
    if (!current.children.containsKey(part)) {
      current.children[part] = ComponentNode(
        id: part,
        route: fullPath.substring(0, fullPath.indexOf(part) + part.length),
      );
    }

    return findOrCreateNode(current.children[part]!, pathParts, fullPath);
  }

  componentsMap.forEach((path, builtComponents) {
    List<String> pathParts =
        path.split('/').where((part) => part.isNotEmpty).toList();

    ComponentNode currentNode = findOrCreateNode(root, pathParts, path);

    for (var component in builtComponents) {
      currentNode.builtComponents[component.path] = component;
    }
  });

  return root;
}
