import 'dart:io';

import 'package:catalog/src/annotations/preview.dart';
import 'package:catalog/src/builders/catalog/built_component.dart';
import 'package:catalog/src/builders/catalog/component_node.dart';
import 'package:catalog/src/extensions/string_ext.dart';

Future<String?> findPreviewClassName(String path) async {
  try {
    File file = File(path);
    final content = await file.readAsString();
    return '${content.split("class ")[1].split(" extends ParentPreviewWidget").first.trim()}()';
  } catch (e) {
    print(e);
    return null;
  }
}

Future<BuiltComponent?> createPage(
  String appId,
  String base,
  String outputPath,
  String outputFile,
  String prefix,
  Preview preview,
  String import,
  String name,
) async {
  try {
    var directory = Directory(outputPath);
    await directory.create(recursive: true);
    var id = preview.id;
    File file = File(outputPath + outputFile.replaceAll('.$prefix.', '.'));

    final clazzName = name.replaceAll('()', '');
    final pageClass = '${clazzName}PreviewPageDummy';

    print(
        'üìÉ Generating Catalog page for $clazzName - $pageClass (${file.path})');

    var content = '''
/// AUTOGENERATED FILE. DO NOT EDIT

import 'package:flutter/material.dart';
import '$import';

class $pageClass extends StatefulWidget {

  static String routeName = '$id';
  
  const $pageClass({super.key});

  @override
  ${pageClass}State createState() => ${pageClass}State();
}

class ${pageClass}State extends State<$pageClass> {
  @override
  Widget build(BuildContext context) {
    return const $clazzName();
  }
}
    ''';
    file.writeAsStringSync(content);

    var p = file.path.split(base)[1];
    var package = 'package:$appId$p';

    print('route added: ${preview.path}');

    return BuiltComponent(
      path: file.path,
      route: preview.path,
      package: package,
      clazzName: '${name.replaceAll('()', '')}PreviewPageDummy',
      preview: preview,
    );
  } catch (e) {
    print(e);
    return null;
  }
}

Future<BuiltComponent?> buildMiddlePages(
  String appId,
  String base,
  String outputPath,
  String outputFile,
  String import,
  String name,
  String path,
  String pageRoute,
  List<ComponentNode> children,
) async {
  try {
    var directory = Directory(outputPath);
    await directory.create(recursive: true);
    File file = File('$outputPath/$outputFile');

    final clazz =
        name.replaceAll('()', '').split('_').map((e) => e.capitalize()).join();
    final clazzName = '${clazz}PreviewPageDummy';

    var content = '''
/// AUTOGENERATED FILE. DO NOT EDIT

import 'package:catalog/catalog.dart';
import 'package:flutter/material.dart';

class $clazzName extends StatefulWidget {

  static String routeName = '${name.toLowerCase()}';

  const $clazzName({super.key});

  @override
  ${clazzName}State createState() => ${clazzName}State();
}

class ${clazzName}State extends State<$clazzName> {
  @override
  Widget build(BuildContext context) {
    return PreviewScaffold(
      child: ListView(
        children: [
        ''';

    for (ComponentNode node in children) {
      content += '''
          ListTile(
            title: const Text(
              '${node.id}',
              style: TextStyle(  
                color: Colors.black,
                fontSize: 16,
                letterSpacing: .3,
              ),
            ),
            onTap: () {
              context.go('/$pageRoute/$path/${node.id}');
            },
          ),
          ''';
    }

    content += '''
        ],
      ),
    );
  }
}

    ''';
    file.writeAsStringSync(content);

    var p = file.path.split(base)[1];
    var package = 'package:$appId$p';

    return BuiltComponent(
      path: file.path,
      route: path,
      package: package,
      clazzName: clazzName,
      preview: null,
    );
  } catch (e) {
    return null;
  }
}

/*
Future<ComponentNode?> buildChildrenPages(
  String basePath,
  dynamic config,
  String appId,
  ComponentNode node,
  String path,
  String pageRoute,
  int level,
) async {
  try {
    ComponentNode n = node;
    String p = path;
    if (level == 0) {
      n.builtComponent = BuiltComponent();
      n.builtComponent!.path =
          './${config['base']}/${config['output']}/${config['pageFile']}';
      n.builtComponent!.route = '';
      n.builtComponent!.clazzName = 'CatalogComponent';

      final File file = File(basePath + n.builtComponent!.path);
      var fp = file.path.split(config['base'])[1];
      n.builtComponent!.package = 'package:$appId$fp';

      for (var entry in n.children.entries) {
        var f = await buildChildrenPages(
          basePath,
          config,
          appId,
          entry.value,
          p,
          pageRoute,
          level + 1,
        );
        if (f == null) continue;
        n.children[entry.key] = f;
      }
      return n;
    }

    if (n.builtComponent != null) {
      return n;
    }

    var current = n.id;

    if (p.isEmpty) {
      p += current;
    } else {
      p += '/$current';
    }

    // print('Generating middle page: $current');
    var middleFolder = './$basePath${config['base']}/${config['output']}/$p';
    n.builtComponent = await buildMiddlePages(
      appId,
      config['base'],
      middleFolder,
      '${current.toLowerCase()}_preview_page_dummy.dart',
      '',
      current.capitalize(),
      p,
      pageRoute,
      n.childrenList,
    );

    n.builtComponent!.route = p;

    for (var entry in n.children.entries) {
      print('build children page: ${entry.key}');
      var f = await buildChildrenPages(
        basePath,
        config,
        appId,
        entry.value,
        p,
        pageRoute,
        level + 1,
      );
      if (f == null) continue;
      n.children[entry.key] = f;
    }
    return n;
  } catch (e) {
    return null;
  }
}
*/
ComponentNode buildTreeFromMap(
  String pageRoute,
  Map<String, List<BuiltComponent>> componentsMap,
) {
  // Nodo ra√≠z del √°rbol
  ComponentNode root = ComponentNode(id: pageRoute, route: '/');

  // Funci√≥n auxiliar para crear o encontrar un nodo dentro del √°rbol
  ComponentNode findOrCreateNode(
    ComponentNode current,
    List<String> pathParts,
    String fullPath,
  ) {
    if (pathParts.isEmpty) {
      return current;
    }

    // Obtener el primer segmento del path y crear el nodo hijo si no existe
    String part = pathParts.removeAt(0);
    if (!current.children.containsKey(part)) {
      current.children[part] = ComponentNode(
        id: part,
        route: fullPath.substring(0, fullPath.indexOf(part) + part.length),
      );
    }

    // Recursivamente buscar o crear el siguiente nodo hijo
    return findOrCreateNode(current.children[part]!, pathParts, fullPath);
  }

  // Recorrer cada entrada del mapa y asignarla a su nodo correspondiente
  componentsMap.forEach((path, builtComponents) {
    // Dividir el path en sus partes, excluyendo la ra√≠z '/'
    List<String> pathParts =
        path.split('/').where((part) => part.isNotEmpty).toList();

    // Encontrar o crear el nodo adecuado para este path
    ComponentNode currentNode = findOrCreateNode(root, pathParts, path);

    // Agregar los componentes del directorio actual al nodo correspondiente
    for (var component in builtComponents) {
      currentNode.builtComponents[component.path] = component;
    }
  });

  return root;
}

/*
ComponentNode getNodesFrom(
  String pageRoute,
  Map<String, List<BuiltComponent>> components,
) {
  var firstNode = ComponentNode(id: pageRoute, route: '/');

  final pathLevels = components.entries.toList();

  for (var entity in pathLevels) {
    final pathLevel = entity.key;
    final pagesInThatLevel = entity.value.toList();

    for (var page in pagesInThatLevel) {
      print('=======================================================');
      print('route: ${page.route}');
      var parts = page.route.split('/');
      if (parts.first == '.') {
        parts.removeAt(0);
      }
      addNode(firstNode, parts, 0, page);
    }
  }

  return firstNode;
}

void addNode(
  ComponentNode node,
  List<String> parts,
  int index,
  BuiltComponent component,
) {
  if (index >= parts.length) {
    return;
  }
  ComponentNode? no;
  for (var n in node.children.values.toList()) {
    if (n.id == parts[index]) {
      no = n;
      break;
    }
  }

  if (no == null) {
    print('parts: ${parts.join(', ')}');
    no = ComponentNode(
      id: parts[index],
      route: '/${parts[index]}',
      builtComponent: parts.length - 1 == index ? component : null,
    );
    print('adding: ${no.id}');
    print('    ${no.builtComponent?.preview?.path}');
    node.children[no.id] = no;
  }

  if (no.route == '/${component.route}') {
    final a = '/${component.package.split('/').last}';
    node.children[no.id]?.builtComponents[a] = component;
  } else if (index < parts.length) {
    addNode(no, parts, index + 1, component);
  }
}

 */
