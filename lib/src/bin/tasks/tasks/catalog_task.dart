import 'dart:io';

import 'package:catalog/src/base/serial.dart';
import 'package:catalog/src/builders/catalog/built_component.dart';
import 'package:catalog/src/builders/catalog/component_node.dart';

import '../../catalog_builder/catalog_builder.dart';
import '../../utils/configuration.dart';
import '../base/base_task.dart';

class CatalogTask extends BaseTask {
  @override
  Future<void> work(List<String> args) async {
    final base = args.isEmpty ? '' : '${args.first}/';

    var appId = loadId(base);
    var config = loadConfigFile(base);

    final page = config['pageFile'] ?? 'catalog_component.dart';
    final pageName = config['pageName'] ?? 'CatalogComponent';
    final pageRoute = config['pageRoute'] ?? 'catalog';
    final prefixValue = config['prefix'] ?? 'preview';

    final dir = Directory('./$base${config['base']}');
    await dir.create(recursive: true);

    final dirOutPut = Directory('./$base${config['base']}/${config['output']}');
    await dirOutPut.create(recursive: true);

    final List<FileSystemEntity> entities = await dir
        .list(
          recursive: true,
        )
        .toList();

    final files = <FileSystemEntity>[];

    for (FileSystemEntity fileSystemEntity in entities) {
      if (fileSystemEntity.path.contains('.$prefixValue.')) {
        files.add(fileSystemEntity);
      }
    }

    var map = <String, List<BuiltComponent>>{};

    for (FileSystemEntity fileSystemEntity in files) {
      final File file = File(fileSystemEntity.path);
      var p = file.path.split(config['base'])[1];
      var package = 'package:$appId$p';
      var className = await findPreviewClassName(file.path);

      if (className == null) {
        print('No class name found ${file.path}');
        continue;
      }

      var preview = await previewOnFile(
        base,
        config,
        file.path,
      );

      if (preview == null) {
        print('No preview data found ${file.path}');
        continue;
      }

      var outputFolder =
          './$base${config['base']}/${config['output']}/${preview.path}/';

      var build = await createPage(
        appId,
        config['base'],
        outputFolder,
        p.split('/').last,
        prefixValue,
        preview,
        package,
        className,
      );

      if (build == null) {
        print('No build for $className');
        continue;
      }

      if (map[build.route] == null) {
        map[build.route] = <BuiltComponent>[];
      }
      (map[build.route] as List<BuiltComponent>).add(build);
    }

    ComponentNode node = buildTreeFromMap(pageRoute, map);

    final File assetsConfig = File('./$base${config['runtimeConfigHolder']}');
    assetsConfig.writeAsStringSync(node.toJson().toPrettyString());

    final File catalogFile = File(
      './$base${config['base']}/${config['output']}/$page',
    );

    // print(node.routerBuilder);

    var catalogContent = '''
/// AUTOGENERATED FILE. DO NOT EDIT

import 'package:flutter/material.dart';
import 'package:catalog/catalog.dart';
${node.imports}

class $pageName extends StatefulWidget {
  static String routeName = '/$pageRoute';
  
  static GoRoute route = ${node.routerBuilder};
  
  const $pageName({super.key});

  @override
  ${pageName}State createState() => ${pageName}State();
}

class ${pageName}State extends State<$pageName> {

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<ComponentNode?>(
      initialData: null,
      future: Catalog().get(context),
      builder: (context, data) {
        if (!data.hasData || data.data == null) {
          return Container();
        }
        final node = data.data as ComponentNode;
        return PreviewScaffold(
          basePath: CatalogComponent.routeName,
          onBackPressed: Catalog().onBackPressed,
          child: ListView(
            children: [
              buildTreeWidget(
                context,
                CatalogComponent.routeName,
                node,
                0,
              )
            ],
          ),
        );
      },
    );
  }
}

  '''
        .replaceAll('"""', '\'\'\'')
        .replaceAll(' []', ' const []');

    catalogFile.writeAsStringSync(catalogContent);

    final File file =
        File('./$base${config['base']}/${config['output']}/process.dart');
    if (file.existsSync()) await file.delete();
  }
}
